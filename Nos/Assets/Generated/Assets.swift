// +++++ Do not edit this file directly. Changes will be overwritten. +++++
// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

import SwiftUI

// swiftlint:disable superfluous_disable_command file_length implicit_return

extension Color {

       static let accentColor = Color("AccentColor", bundle: Bundle.current)
       static let actionBar = Color("actionBar", bundle: Bundle.current)
       static let aliasCountButtonBackground = Color("aliasCountButtonBackground", bundle: Bundle.current)
       static let appBackground = Color("appBackground", bundle: Bundle.current)
       static let avatarRing = Color("avatarRing", bundle: Bundle.current)
       static let buttonShadow = Color("button-shadow", bundle: Bundle.current)
       static let cardBackground = Color("cardBackground", bundle: Bundle.current)
       static let cardBorder = Color("cardBorder", bundle: Bundle.current)
       static let cardDropShadow = Color("cardDropShadow", bundle: Bundle.current)
       static let cardGradientBottom = Color("cardGradientBottom", bundle: Bundle.current)
       static let cardGradientTop = Color("cardGradientTop", bundle: Bundle.current)
       static let cardTextInputBackground = Color("cardTextInputBackground", bundle: Bundle.current)
       static let cardTextInputBorder = Color("cardTextInputBorder", bundle: Bundle.current)
       static let cardTextInputText = Color("cardTextInputText", bundle: Bundle.current)
       static let cardThickness = Color("cardThickness", bundle: Bundle.current)
       static let cardTitle = Color("cardTitle", bundle: Bundle.current)
       static let defaultTint = Color("defaultTint", bundle: Bundle.current)
       static let detailTextColor = Color("detailTextColor", bundle: Bundle.current)
       static let dividerShadow = Color("divider-shadow", bundle: Bundle.current)
       static let divider = Color("divider", bundle: Bundle.current)
       static let floatingRefreshButton = Color("floatingRefreshButton", bundle: Bundle.current)
       static let galleryColor = Color("galleryColor", bundle: Bundle.current)
       static let highlightGradientAverage = Color("highlightGradientAverage", bundle: Bundle.current)
       static let highlightGradientLeading = Color("highlightGradientLeading", bundle: Bundle.current)
       static let highlightGradientTrailing = Color("highlightGradientTrailing", bundle: Bundle.current)
       static let imageBorder = Color("imageBorder", bundle: Bundle.current)
       static let linkColor = Color("linkColor", bundle: Bundle.current)
       static let loadingIcon = Color("loadingIcon", bundle: Bundle.current)
       static let mainText = Color("mainText", bundle: Bundle.current)
       static let menuBackgroundColor = Color("menuBackgroundColor", bundle: Bundle.current)
       static let menuBorderColor = Color("menuBorderColor", bundle: Bundle.current)
       static let menuSelectedItemBackground = Color("menuSelectedItemBackground", bundle: Bundle.current)
       static let menuSelectedItemText = Color("menuSelectedItemText", bundle: Bundle.current)
       static let menuUnselectedItemText = Color("menuUnselectedItemText", bundle: Bundle.current)
       static let networkAnimation = Color("networkAnimation", bundle: Bundle.current)
       static let onboardingMainText = Color("onboardingMainText", bundle: Bundle.current)
       static let onboardingTitle = Color("onboardingTitle", bundle: Bundle.current)
       static let pillButtonBackground = Color("pillButtonBackground", bundle: Bundle.current)
       static let pillButtonBackgroundDisabled = Color("pillButtonBackgroundDisabled", bundle: Bundle.current)
       static let pillButtonBackgroundPressed = Color("pillButtonBackgroundPressed", bundle: Bundle.current)
       static let pillButtonText = Color("pillButtonText", bundle: Bundle.current)
       static let pillButtonTextDisabled = Color("pillButtonTextDisabled", bundle: Bundle.current)
       static let primaryAction = Color("primaryAction", bundle: Bundle.current)
       static let reactionUser = Color("reactionUser", bundle: Bundle.current)
       static let screenOverlay = Color("screenOverlay", bundle: Bundle.current)
       static let secondaryAction = Color("secondaryAction", bundle: Bundle.current)
       static let separatorDefault = Color("separator.default", bundle: Bundle.current)
       static let splashBackgroundColor = Color("splashBackgroundColor", bundle: Bundle.current)
       static let subheadlineText = Color("subheadlineText", bundle: Bundle.current)
       static let textBorderColor = Color("textBorderColor", bundle: Bundle.current)
       static let textInputBackground = Color("textInputBackground", bundle: Bundle.current)
       static let textInputBorder = Color("textInputBorder", bundle: Bundle.current)
       static let accent = Color("accent", bundle: Bundle.current)
       static let appBg = Color("app-bg", bundle: Bundle.current)
       static let cardBgBottom = Color("card-bg-bottom", bundle: Bundle.current)
       static let cardBgTop = Color("card-bg-top", bundle: Bundle.current)
       static let cardBorderBottom = Color("card-border-bottom", bundle: Bundle.current)
       static let cardDividerShadow = Color("card-divider-shadow", bundle: Bundle.current)
       static let cardDivider = Color("card-divider", bundle: Bundle.current)
       static let cardShadowBottom = Color("card-shadow-bottom", bundle: Bundle.current)
       static let hashtagBg = Color("hashtag-bg", bundle: Bundle.current)
       static let navigationbarBg = Color("navigationbar-bg", bundle: Bundle.current)
       static let postareplyBackground = Color("postareply-background", bundle: Bundle.current)
       static let postareplyShadowBottom = Color("postareply-shadow-bottom", bundle: Bundle.current)
       static let postareplyShadowTop = Color("postareply-shadow-top", bundle: Bundle.current)
       static let primaryTxt = Color("primary-txt", bundle: Bundle.current)
       static let profileBgBottom = Color("profile-bg-bottom", bundle: Bundle.current)
       static let profileBgTop = Color("profile-bg-top", bundle: Bundle.current)
       static let profileShadow = Color("profile-shadow", bundle: Bundle.current)
       static let relationshipViewBg = Color("relationship-view-bg", bundle: Bundle.current)
       static let secondaryText = Color("secondaryText", bundle: Bundle.current)
       static let selectedtabBg = Color("selectedtab-bg", bundle: Bundle.current)
       static let tabBgBottom = Color("tab-bg-bottom", bundle: Bundle.current)
       static let tabBgTop = Color("tab-bg-top", bundle: Bundle.current)
       static let tabBorderBottom = Color("tab-border-bottom", bundle: Bundle.current)
       static let tabShadowBottom = Color("tab-shadow-bottom", bundle: Bundle.current)
       static let buttonBevelBottom = Color("button-bevel-bottom", bundle: Bundle.current)
       static let buttonBevelTop = Color("button-bevel-top", bundle: Bundle.current)
}

extension UIColor {

       static let accentColor = UIColor(named: "AccentColor", in: Bundle.current, compatibleWith: nil)!
       static let actionBar = UIColor(named: "actionBar", in: Bundle.current, compatibleWith: nil)!
       static let aliasCountButtonBackground = UIColor(named: "aliasCountButtonBackground", in: Bundle.current, compatibleWith: nil)!
       static let appBackground = UIColor(named: "appBackground", in: Bundle.current, compatibleWith: nil)!
       static let avatarRing = UIColor(named: "avatarRing", in: Bundle.current, compatibleWith: nil)!
       static let buttonShadow = UIColor(named: "button-shadow", in: Bundle.current, compatibleWith: nil)!
       static let cardBackground = UIColor(named: "cardBackground", in: Bundle.current, compatibleWith: nil)!
       static let cardBorder = UIColor(named: "cardBorder", in: Bundle.current, compatibleWith: nil)!
       static let cardDropShadow = UIColor(named: "cardDropShadow", in: Bundle.current, compatibleWith: nil)!
       static let cardGradientBottom = UIColor(named: "cardGradientBottom", in: Bundle.current, compatibleWith: nil)!
       static let cardGradientTop = UIColor(named: "cardGradientTop", in: Bundle.current, compatibleWith: nil)!
       static let cardTextInputBackground = UIColor(named: "cardTextInputBackground", in: Bundle.current, compatibleWith: nil)!
       static let cardTextInputBorder = UIColor(named: "cardTextInputBorder", in: Bundle.current, compatibleWith: nil)!
       static let cardTextInputText = UIColor(named: "cardTextInputText", in: Bundle.current, compatibleWith: nil)!
       static let cardThickness = UIColor(named: "cardThickness", in: Bundle.current, compatibleWith: nil)!
       static let cardTitle = UIColor(named: "cardTitle", in: Bundle.current, compatibleWith: nil)!
       static let defaultTint = UIColor(named: "defaultTint", in: Bundle.current, compatibleWith: nil)!
       static let detailTextColor = UIColor(named: "detailTextColor", in: Bundle.current, compatibleWith: nil)!
       static let dividerShadow = UIColor(named: "divider-shadow", in: Bundle.current, compatibleWith: nil)!
       static let divider = UIColor(named: "divider", in: Bundle.current, compatibleWith: nil)!
       static let floatingRefreshButton = UIColor(named: "floatingRefreshButton", in: Bundle.current, compatibleWith: nil)!
       static let galleryColor = UIColor(named: "galleryColor", in: Bundle.current, compatibleWith: nil)!
       static let highlightGradientAverage = UIColor(named: "highlightGradientAverage", in: Bundle.current, compatibleWith: nil)!
       static let highlightGradientLeading = UIColor(named: "highlightGradientLeading", in: Bundle.current, compatibleWith: nil)!
       static let highlightGradientTrailing = UIColor(named: "highlightGradientTrailing", in: Bundle.current, compatibleWith: nil)!
       static let imageBorder = UIColor(named: "imageBorder", in: Bundle.current, compatibleWith: nil)!
       static let linkColor = UIColor(named: "linkColor", in: Bundle.current, compatibleWith: nil)!
       static let loadingIcon = UIColor(named: "loadingIcon", in: Bundle.current, compatibleWith: nil)!
       static let mainText = UIColor(named: "mainText", in: Bundle.current, compatibleWith: nil)!
       static let menuBackgroundColor = UIColor(named: "menuBackgroundColor", in: Bundle.current, compatibleWith: nil)!
       static let menuBorderColor = UIColor(named: "menuBorderColor", in: Bundle.current, compatibleWith: nil)!
       static let menuSelectedItemBackground = UIColor(named: "menuSelectedItemBackground", in: Bundle.current, compatibleWith: nil)!
       static let menuSelectedItemText = UIColor(named: "menuSelectedItemText", in: Bundle.current, compatibleWith: nil)!
       static let menuUnselectedItemText = UIColor(named: "menuUnselectedItemText", in: Bundle.current, compatibleWith: nil)!
       static let networkAnimation = UIColor(named: "networkAnimation", in: Bundle.current, compatibleWith: nil)!
       static let onboardingMainText = UIColor(named: "onboardingMainText", in: Bundle.current, compatibleWith: nil)!
       static let onboardingTitle = UIColor(named: "onboardingTitle", in: Bundle.current, compatibleWith: nil)!
       static let pillButtonBackground = UIColor(named: "pillButtonBackground", in: Bundle.current, compatibleWith: nil)!
       static let pillButtonBackgroundDisabled = UIColor(named: "pillButtonBackgroundDisabled", in: Bundle.current, compatibleWith: nil)!
       static let pillButtonBackgroundPressed = UIColor(named: "pillButtonBackgroundPressed", in: Bundle.current, compatibleWith: nil)!
       static let pillButtonText = UIColor(named: "pillButtonText", in: Bundle.current, compatibleWith: nil)!
       static let pillButtonTextDisabled = UIColor(named: "pillButtonTextDisabled", in: Bundle.current, compatibleWith: nil)!
       static let primaryAction = UIColor(named: "primaryAction", in: Bundle.current, compatibleWith: nil)!
       static let reactionUser = UIColor(named: "reactionUser", in: Bundle.current, compatibleWith: nil)!
       static let screenOverlay = UIColor(named: "screenOverlay", in: Bundle.current, compatibleWith: nil)!
       static let secondaryAction = UIColor(named: "secondaryAction", in: Bundle.current, compatibleWith: nil)!
       static let separatorDefault = UIColor(named: "separator.default", in: Bundle.current, compatibleWith: nil)!
       static let splashBackgroundColor = UIColor(named: "splashBackgroundColor", in: Bundle.current, compatibleWith: nil)!
       static let subheadlineText = UIColor(named: "subheadlineText", in: Bundle.current, compatibleWith: nil)!
       static let textBorderColor = UIColor(named: "textBorderColor", in: Bundle.current, compatibleWith: nil)!
       static let textInputBackground = UIColor(named: "textInputBackground", in: Bundle.current, compatibleWith: nil)!
       static let textInputBorder = UIColor(named: "textInputBorder", in: Bundle.current, compatibleWith: nil)!
       static let accent = UIColor(named: "accent", in: Bundle.current, compatibleWith: nil)!
       static let appBg = UIColor(named: "app-bg", in: Bundle.current, compatibleWith: nil)!
       static let cardBgBottom = UIColor(named: "card-bg-bottom", in: Bundle.current, compatibleWith: nil)!
       static let cardBgTop = UIColor(named: "card-bg-top", in: Bundle.current, compatibleWith: nil)!
       static let cardBorderBottom = UIColor(named: "card-border-bottom", in: Bundle.current, compatibleWith: nil)!
       static let cardDividerShadow = UIColor(named: "card-divider-shadow", in: Bundle.current, compatibleWith: nil)!
       static let cardDivider = UIColor(named: "card-divider", in: Bundle.current, compatibleWith: nil)!
       static let cardShadowBottom = UIColor(named: "card-shadow-bottom", in: Bundle.current, compatibleWith: nil)!
       static let hashtagBg = UIColor(named: "hashtag-bg", in: Bundle.current, compatibleWith: nil)!
       static let navigationbarBg = UIColor(named: "navigationbar-bg", in: Bundle.current, compatibleWith: nil)!
       static let postareplyBackground = UIColor(named: "postareply-background", in: Bundle.current, compatibleWith: nil)!
       static let postareplyShadowBottom = UIColor(named: "postareply-shadow-bottom", in: Bundle.current, compatibleWith: nil)!
       static let postareplyShadowTop = UIColor(named: "postareply-shadow-top", in: Bundle.current, compatibleWith: nil)!
       static let primaryTxt = UIColor(named: "primary-txt", in: Bundle.current, compatibleWith: nil)!
       static let profileBgBottom = UIColor(named: "profile-bg-bottom", in: Bundle.current, compatibleWith: nil)!
       static let profileBgTop = UIColor(named: "profile-bg-top", in: Bundle.current, compatibleWith: nil)!
       static let profileShadow = UIColor(named: "profile-shadow", in: Bundle.current, compatibleWith: nil)!
       static let relationshipViewBg = UIColor(named: "relationship-view-bg", in: Bundle.current, compatibleWith: nil)!
       static let secondaryText = UIColor(named: "secondaryText", in: Bundle.current, compatibleWith: nil)!
       static let selectedtabBg = UIColor(named: "selectedtab-bg", in: Bundle.current, compatibleWith: nil)!
       static let tabBgBottom = UIColor(named: "tab-bg-bottom", in: Bundle.current, compatibleWith: nil)!
       static let tabBgTop = UIColor(named: "tab-bg-top", in: Bundle.current, compatibleWith: nil)!
       static let tabBorderBottom = UIColor(named: "tab-border-bottom", in: Bundle.current, compatibleWith: nil)!
       static let tabShadowBottom = UIColor(named: "tab-shadow-bottom", in: Bundle.current, compatibleWith: nil)!
       static let buttonBevelBottom = UIColor(named: "button-bevel-bottom", in: Bundle.current, compatibleWith: nil)!
       static let buttonBevelTop = UIColor(named: "button-bevel-top", in: Bundle.current, compatibleWith: nil)!
}

extension Image {

       static let info = Image("Info", bundle: Bundle.current)
       static let attachMediaButton = Image("attach-media-button", bundle: Bundle.current)
       static let backChevron = Image("back-chevron", bundle: Bundle.current)
       static let buttonLikeActive = Image("button-like-active", bundle: Bundle.current)
       static let buttonLikeDefault = Image("button-like-default", bundle: Bundle.current)
       static let buttonReply = Image("button-reply", bundle: Bundle.current)
       static let checkmark = Image("checkmark", bundle: Bundle.current)
       static let disappearingMessages = Image("disappearing-messages", bundle: Bundle.current)
       static let editProfile = Image("edit-profile", bundle: Bundle.current)
       static let emptyAvatar = Image("emptyAvatar", bundle: Bundle.current)
       static let flagPlain = Image("flag-plain", bundle: Bundle.current)
       static let navIconDismiss = Image("nav-icon-dismiss", bundle: Bundle.current)
       static let newPostButton = Image("newPostButton", bundle: Bundle.current)
       static let nosLogo = Image("nosLogo", bundle: Bundle.current)
       static let relayLeft = Image("relay-left", bundle: Bundle.current)
       static let relayRight = Image("relay-right", bundle: Bundle.current)
       static let repostButtonPressed = Image("repost-button-pressed", bundle: Bundle.current)
       static let repostButton = Image("repost-button", bundle: Bundle.current)
       static let repostSymbol = Image("repost-symbol", bundle: Bundle.current)
       static let sideMenu = Image("sideMenu", bundle: Bundle.current)
       static let tabIconEveryoneSelected = Image("tab-icon-everyone-selected", bundle: Bundle.current)
       static let tabIconEveryone = Image("tab-icon-everyone", bundle: Bundle.current)
       static let tabIconHomeSelected = Image("tab-icon-home-selected", bundle: Bundle.current)
       static let tabIconHome = Image("tab-icon-home", bundle: Bundle.current)
       static let tabIconNotificationsSelected = Image("tab-icon-notifications-selected", bundle: Bundle.current)
       static let tabIconNotifications = Image("tab-icon-notifications", bundle: Bundle.current)
       static let tabProfileSelected = Image("tab-profile-selected", bundle: Bundle.current)
       static let tabProfile = Image("tab-profile", bundle: Bundle.current)
       static let warningEye = Image("warning-eye", bundle: Bundle.current)
       static let x = Image("x", bundle: Bundle.current)
}

extension UIImage {

       static let info = UIImage(named: "Info", in: Bundle.current, with: nil)!
       static let attachMediaButton = UIImage(named: "attach-media-button", in: Bundle.current, with: nil)!
       static let backChevron = UIImage(named: "back-chevron", in: Bundle.current, with: nil)!
       static let buttonLikeActive = UIImage(named: "button-like-active", in: Bundle.current, with: nil)!
       static let buttonLikeDefault = UIImage(named: "button-like-default", in: Bundle.current, with: nil)!
       static let buttonReply = UIImage(named: "button-reply", in: Bundle.current, with: nil)!
       static let checkmark = UIImage(named: "checkmark", in: Bundle.current, with: nil)!
       static let disappearingMessages = UIImage(named: "disappearing-messages", in: Bundle.current, with: nil)!
       static let editProfile = UIImage(named: "edit-profile", in: Bundle.current, with: nil)!
       static let emptyAvatar = UIImage(named: "emptyAvatar", in: Bundle.current, with: nil)!
       static let flagPlain = UIImage(named: "flag-plain", in: Bundle.current, with: nil)!
       static let navIconDismiss = UIImage(named: "nav-icon-dismiss", in: Bundle.current, with: nil)!
       static let newPostButton = UIImage(named: "newPostButton", in: Bundle.current, with: nil)!
       static let nosLogo = UIImage(named: "nosLogo", in: Bundle.current, with: nil)!
       static let relayLeft = UIImage(named: "relay-left", in: Bundle.current, with: nil)!
       static let relayRight = UIImage(named: "relay-right", in: Bundle.current, with: nil)!
       static let repostButtonPressed = UIImage(named: "repost-button-pressed", in: Bundle.current, with: nil)!
       static let repostButton = UIImage(named: "repost-button", in: Bundle.current, with: nil)!
       static let repostSymbol = UIImage(named: "repost-symbol", in: Bundle.current, with: nil)!
       static let sideMenu = UIImage(named: "sideMenu", in: Bundle.current, with: nil)!
       static let tabIconEveryoneSelected = UIImage(named: "tab-icon-everyone-selected", in: Bundle.current, with: nil)!
       static let tabIconEveryone = UIImage(named: "tab-icon-everyone", in: Bundle.current, with: nil)!
       static let tabIconHomeSelected = UIImage(named: "tab-icon-home-selected", in: Bundle.current, with: nil)!
       static let tabIconHome = UIImage(named: "tab-icon-home", in: Bundle.current, with: nil)!
       static let tabIconNotificationsSelected = UIImage(named: "tab-icon-notifications-selected", in: Bundle.current, with: nil)!
       static let tabIconNotifications = UIImage(named: "tab-icon-notifications", in: Bundle.current, with: nil)!
       static let tabProfileSelected = UIImage(named: "tab-profile-selected", in: Bundle.current, with: nil)!
       static let tabProfile = UIImage(named: "tab-profile", in: Bundle.current, with: nil)!
       static let warningEye = UIImage(named: "warning-eye", in: Bundle.current, with: nil)!
       static let x = UIImage(named: "x", in: Bundle.current, with: nil)!
}

// swiftlint:enable all
